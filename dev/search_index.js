var documenterSearchIndex = {"docs":
[{"location":"interface/#Interface","page":"Interface","title":"Interface","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"A number of functions have been added to make it a bit easier to interact with the Airtable API. These are built on top of the low-level interface, which is just a thin wrapper around the HTTP.jl functions.","category":"page"},{"location":"interface/#[Airtable.query](@ref)-function","page":"Interface","title":"Airtable.query function","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"If you are interested in retrieving records, your best bet is the Airtable.query function. Because the airtable API will only return 100 records per request[1], and only allows 5 requests/sec, query() automatically handles the \"paging\", pausing for 0.2 seconds in between each request so that you won't hit your limit.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"At minimum, query() requires an AirTable (note the capital 'T'), which requires that you know the base name and table name for your air table. If you only pass the table, you will retrieve all of the records for that table.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"julia> tab = AirTable(\"Table 1\", AirBase(\"appphImnhJO8AXmmo\"))\nAirTable(\"Table 1\")\n\njulia> Airtable.query(tab)\n3-element Vector{AirRecord}:\n AirRecord(\"recMc1HOSIxQPJyyc\", AirTable(\"Table 1\"), (Name = \"Record 1\", Notes = \"Keep this\\n\", Status = \"Todo\", Keep = true))\n AirRecord(\"recMwT4P4tKlSLJoH\", AirTable(\"Table 1\"), (Name = \"Record 2\", Notes = \"Also keep this\", Status = \"In progress\", Keep = t\nrue))\n AirRecord(\"recSStgr3yJnQc2Wg\", AirTable(\"Table 1\"), (Name = \"Record 3\", Status = \"Done\", Keep = true))","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Here, the Credential is used automatically from the AIRTABLE_KEY environmental variable. As you can see, unlike the low-level functions that return JSON3.Objects, query() returns AirRecords","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"You may also pass additional query parameters (passed as keyword arguments) to filter, or otherwise modify the query.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"julia> Airtable.query(tab; filterByFormula=\"{Status} = 'Todo'\")\n1-element Vector{AirRecord}:\n AirRecord(\"recMc1HOSIxQPJyyc\", AirTable(\"Table 1\"), (Name = \"Record 1\", Notes = \"Keep this\\n\", Status = \"Todo\", Keep = true))\n\njulia> Airtable.query(tab; filterByFormula=\"{Status} != 'Todo'\")\n2-element Vector{AirRecord}:\n AirRecord(\"recMwT4P4tKlSLJoH\", AirTable(\"Table 1\"), (Name = \"Record 2\", Notes = \"Also keep this\", Status = \"In progress\", Keep = t\nrue))\n AirRecord(\"recSStgr3yJnQc2Wg\", AirTable(\"Table 1\"), (Name = \"Record 3\", Status = \"Done\", Keep = true))","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"For more information about usable query parameters, refer to the airtable documentation.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"AirBase\nAirTable\nAirRecord\nAirtable.query","category":"page"},{"location":"interface/#Airtable.AirBase","page":"Interface","title":"Airtable.AirBase","text":"AirBase(id::String)\n\nA wrapper for an Airtable Base, containing its unique identifier.  The ID can be identified from the URL of the base (the part right after airtable.com), or by clicking HELP -> API documentation from within your base.\n\n\n\n\n\n","category":"type"},{"location":"interface/#Airtable.AirTable","page":"Interface","title":"Airtable.AirTable","text":"AirTable(id::String, ::AirBase)\n\nA wrapper for an Airtable Table, containing its unique identifier or name, and parent AirBase. \n\n\n\n\n\n","category":"type"},{"location":"interface/#Airtable.AirRecord","page":"Interface","title":"Airtable.AirRecord","text":"AirRecord(id::String, table::AirTable, fields::NamedTuple)\n\nA wrapper for an Airtable Record, containing its unique identifier, parent AirTable, and values for any stored fields in a NamedTuple.\n\nTypically, you won't crete these on your own, but they will be returned from API queries.\n\nField values can be accessed using getindex.\n\n\n\n\n\n","category":"type"},{"location":"interface/#Airtable.query","page":"Interface","title":"Airtable.query","text":"Airtable.query(cred::Credential, baseid, tablename; query_kwargs...)\n\nShorthand for a \"GET\" request that handles continuation and rate-limiting.\n\nThe Airtable API will return a maximum of 100 records per requests, and only allows 5 requests / sec.  This function uses the offset field returned as part of a requst that does not contain all possible records to make additional requests after pausing 0.21 seconds in between.\n\nRequired arguments:\n\ncred: an Airtable.Credential containing your API key\nbaseid: the endpoint of your Airtable base. See https://airtable.com/api for details\ntablename: the name of the table in your base (eg \"Table 1\")\n\nQuery parameters are in the form of keyword arguments, eg filterByFormla = \"NOT({Name} = '')\", maxRecords=2. See Airtable API reference for more information.\n\nIf you know the exact record id, pass that as a fourth positional argument\n\n\n\n\n\n","category":"function"},{"location":"interface/#[AirRecord](@ref)s","page":"Interface","title":"AirRecords","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"An AirRecord refers to a specific row of a specific table. Typically, you would not create records on your own, but they are returned from many of the API functions when you use types from Airtable.jl (as opposed to the low-level interface just using strings).","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"AirRecords contain fields, which refer to columns of the table. Any field values that are not set in the table are not included, But they can be accessed using getindex().","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"julia> rec = first(Airtable.query(tab))\nAirRecord(\"recMc1HOSIxQPJyyc\", AirTable(\"Table 1\"), (Name = \"Record 1\", Notes = \"Keep this\\n\", Status = \"Todo\", Keep = true))\n\njulia> rec[:Name]\n\"Record 1\"\n\njulia> rec[:Status]\n\"Todo\"","category":"page"},{"location":"interface/#Adding-or-changing-records","page":"Interface","title":"Adding or changing records","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"You can add or update records using Airtable.post! and Airtable.patch! respectively. Using post! requires an AirTable as the first argument, while patch! requires an AirRecord.","category":"page"},{"location":"interface/#Using-post!","page":"Interface","title":"Using post!","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"To use post!, pass a table and a NamedTuple with the fields that you want to add. Note that if the fields don't already exist in the parent table, this will throw an error.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"julia> new_rec = Airtable.post!(tab, (; Name = \"Some Record\", Notes = \"It's a nice record\"))\nAirRecord(\"recYvPIayZx1okJ41\", AirTable(\"Table 1\"), (Name = \"Some Record\", Notes = \"It's a nice record\"))","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Notice that the return value is an AirRecord. It can be useful to hold onto this, since it contains the unique identifier. You can also pass a vector of NamedTuples to create multiple records.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"See the note about rate limits.","category":"page"},{"location":"interface/#Using-patch!","page":"Interface","title":"Using patch!","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"If you want to update an existing record, use patch!, with an AirRecord as the first argument, and a NamedTuple for the fields you want to change.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"julia> Airtable.patch!(new_rec, (; Status=\"Done\", Notes=\"It *was* a nice record\"))\nAirRecord(\"recYvPIayZx1okJ41\", AirTable(\"Table 1\"), (Name = \"Some Record\", Notes = \"It *was* a nice record\", Status = \"Done\"))","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"Any fields that you don't include will remain the same. If you want to clear a field, pass missing","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"julia> Airtable.patch!(new_rec, (; Status=\"Done\", Notes=missing))\nAirRecord(\"recYvPIayZx1okJ41\", AirTable(\"Table 1\"), (Name = \"Some Record\", Status = \"Done\"))","category":"page"},{"location":"interface/#Using-delete!","page":"Interface","title":"Using delete!","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"To remove a record, simply pass an AirRecord with the same id to delete!.","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"julia> Airtable.delete!(new_rec)\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 2 entries:\n  :deleted => true\n  :id      => \"recYvPIayZx1okJ41\"","category":"page"},{"location":"interface/","page":"Interface","title":"Interface","text":"[1]: This is the default, you can change this with the pageSize parameter,   but 100 is the maximum.","category":"page"},{"location":"interface/#Add/update-records","page":"Interface","title":"Add/update records","text":"","category":"section"},{"location":"interface/#ratelimit","page":"Interface","title":"A note on rate limits","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"Airtable.com only allows 5 requests / min. The query function handles that automatically, but other functions do not (yet).","category":"page"},{"location":"interface/#Functions-and-Types","page":"Interface","title":"Functions and Types","text":"","category":"section"},{"location":"interface/","page":"Interface","title":"Interface","text":"AirBase\nAirTable\nAirRecord\nAirtable.query\nAirtable.post!\nAirtable.patch!\nAirtable.delete!","category":"page"},{"location":"interface/#Airtable.post!","page":"Interface","title":"Airtable.post!","text":"Airtable.post!(cred::Credential, path[, headers=[], body=nothing]; query_kwargs...)\n\nShorthand for Airtable.request(\"POST\", cred, path[, headers, body]; query_kwargs)\n\n\n\n\n\n","category":"function"},{"location":"interface/#Airtable.patch!","page":"Interface","title":"Airtable.patch!","text":"Airtable.patch!(cred::Credential, path[, headers=[], body=nothing]; query_kwargs...)\n\nShorthand for Airtable.request(\"PATCH\", cred, path[, headers, body]; query_kwargs)\n\n\n\n\n\n","category":"function"},{"location":"interface/#Airtable.delete!","page":"Interface","title":"Airtable.delete!","text":"Airtable.delete!(cred::Credential, path[, headers=[], body=nothing]; query_kwargs...)\n\nShorthand for Airtable.request(\"DELETE\", cred, path[, headers, body]; query_kwargs)\n\n\n\n\n\n","category":"function"},{"location":"low-level/#lowlevel","page":"Low-level interface","title":"Low-level interface","text":"","category":"section"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"Airtable.jl has wrappers around several of the functions from HTTP.jl. These are intended to work approximately the same way, with the following exceptions:","category":"page"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"They require that you pass a Credential containing your API key\nRather than returning the raw response, it reads the response into a JSON3 type.\nKeyword arguments are converted into query parameters.","category":"page"},{"location":"low-level/#Interface","page":"Low-level interface","title":"Interface","text":"","category":"section"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"The primary function is Airtable.request, which contains all of the components for building an API query and parses the returned data with JSON3.jl.","category":"page"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"The following examples use this airtable base, which has the ID \"appphImnhJO8AXmmo\", and the API key described here. To run this code, you will need to substitute the API key and ID from your own base. These examples only scratch the surface - much more information is available in the API documentation for your own base.","category":"page"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"request","category":"page"},{"location":"low-level/#Retrieve-records","page":"Low-level interface","title":"Retrieve records","text":"","category":"section"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"julia> key=Airtable.Credential();\n\njulia> req1 = Airtable.request(\"GET\", key, \"appphImnhJO8AXmmo/Table 1\"; maxRecords=2)\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :records => JSON3.Object[{…\n\njulia> req1.records\n2-element JSON3.Array{JSON3.Object, Base.CodeUnits{UInt8, String}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}}:\n {\n            \"id\": \"recMc1HOSIxQPJyyc\",\n        \"fields\": {\n                       \"Name\": \"Record 1\",\n                      \"Notes\": \"Some notes\",\n                     \"Status\": \"Todo\"\n                  },\n   \"createdTime\": \"2020-10-16T21:04:11.000Z\"\n}\n {\n            \"id\": \"recMwT4P4tKlSLJoH\",\n        \"fields\": {\n                       \"Name\": \"Record 2\",\n                      \"Notes\": \"Other notes\",\n                     \"Status\": \"In progress\"\n                  },\n   \"createdTime\": \"2020-10-16T21:04:11.000Z\"\n}\n\njulia> req2 = Airtable.request(\"GET\", key, \"appphImnhJO8AXmmo/Table 1\"; filterByFormula=\"Status = 'Done'\")\nJSON3.Object{Base.CodeUnits{UInt8, String}, Vector{UInt64}} with 1 entry:\n  :records => JSON3.Object[{…\n\njulia> req2.records\n1-element JSON3.Array{JSON3.Object, Base.CodeUnits{UInt8, String}, SubArray{UInt64, 1, Vector{UInt64}, Tuple{UnitRange{Int64}}, true}}:\n {\n            \"id\": \"recSStgr3yJnQc2Wg\",\n        \"fields\": {\n                       \"Name\": \"Record 3 \",\n                     \"Status\": \"Done\"\n                  },\n   \"createdTime\": \"2020-10-16T21:04:11.000Z\"\n}","category":"page"},{"location":"low-level/#Add-a-record","page":"Low-level interface","title":"Add a record","text":"","category":"section"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"If you need to pass headers, they can be passed as a 4th positional argument.","category":"page"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"julia> Airtable.request(\"POST\", key, \"appphImnhJO8AXmmo/Table 1\",\n                              [\"Content-Type\" => \"application/json\"], # this is appended to the \"Authorization\" header, handled by `key`\n                              \"\"\"\n                              {\n                              \"records\": [\n                                          {\n                                             \"fields\": {\n                                                            \"Name\": \"TEST1\",\n                                                            \"Notes\": \"Some note\",\n                                                         \"Status\": \"Todo\"\n                                                      }\n                                          },\n                                          {\n                                             \"fields\": {\n                                                            \"Name\": \"TEST2\",\n                                                            \"Notes\": \"Other note\",\n                                                         \"Status\": \"Done\"\n                                                      }\n                                          }\n                                       ]\n                              }\"\"\")","category":"page"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"You can also use JSON3 to convert julia types. Eg, the above could have been","category":"page"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"julia> records = (; records = [\n                       (; fields= (; Name=\"TEST1\", Notes=\"Some note\", Status=\"Todo\")),\n                       (; fields= (; Name=\"TEST2\", Notes=\"Other note\", Status=\"Done\"))\n                       ]\n                   );\n\njulia> body = JSON3.write(records);\n\njulia> Airtable.request(\"POST\", key, \"appphImnhJO8AXmmo/Table 1\", [\"Content-Type\" => \"application/json\"], body)","category":"page"},{"location":"low-level/#Other-functions","page":"Low-level interface","title":"Other functions","text":"","category":"section"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"Here are some shorthands for GET, POST, PATCH, and PUT, DELETE.","category":"page"},{"location":"low-level/","page":"Low-level interface","title":"Low-level interface","text":"get\npost!\npatch!\nput!\ndelete!","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Airtable","category":"page"},{"location":"#Airtable","page":"Home","title":"Airtable","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An (unofficial) API for interacting with the Airtable API.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Order   = [:type, :function]","category":"page"},{"location":"#Using-this-package","page":"Home","title":"Using this package","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package is wrapper for the Airtable REST API, using HTTP.jl to do the hard stuff.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This documentation should be used in close conjunction with the Airtable API documentation, which is generated automatically for you using your actual tables (see below).","category":"page"},{"location":"","page":"Home","title":"Home","text":"To use this documentation effectively, you should understand a few of the terms Airtable uses:","category":"page"},{"location":"","page":"Home","title":"Home","text":"A \"Base\" is like a project. There may be several tables contained within a base that can refer to each other.\nA \"Table\" is a 2D array where each row is a \"Record\" and each column is \"Field\".\nA \"Record\" (a row of a table) is an individual observation which may have any number of \"field\" values.\nA \"Field\" (a column of a table) is a named and typed datapoint. When fields are missing for a given record, they are typically not included in API responses.","category":"page"},{"location":"","page":"Home","title":"Home","text":"All API operations also require that you provide authorization in the form of an API key.","category":"page"},{"location":"#apikey","page":"Home","title":"API key","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To obtain your API key, go to your account settings page and click on the \"generate API key\" button. If you previously made a key, you can regenerate it, or just copy the one that's there.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Get airtable API key)","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can then create an Airtable.Credential using that key as a string, or set it as an environmental variable (AIRTABLE_KEY by default).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Credential","category":"page"},{"location":"#Airtable.Credential","page":"Home","title":"Airtable.Credential","text":" Credential(; api_key)\n\nA credential object for Airtable. If the apikey or apitoken are not provided, they will be read from the AIRTABLE_KEY environment variable. Go to Airtable account settings  to aquire your credentials.\n\n# after running `export AIRTABLE_KEY=<api key>` in the shell\njulia> key = Airtable.Credential()\nAirtable.Credential(<secrets>)\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"It is recommended that you use the environmental variable, since many functions can use that by default instead of requiring that you pass it as an argument.","category":"page"},{"location":"#baseid","page":"Home","title":"Base ID","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Open your airtable base, click the help button in the upper right, and then click \"API documentation\". Airtable generates documentation for your sepecific base - near the top you should see a sentence like the follwing, with a different alphanumeric sequence for your base:","category":"page"},{"location":"","page":"Home","title":"Home","text":"The ID of this base is appphImnhJO8AXmmo","category":"page"},{"location":"","page":"Home","title":"Home","text":"It will also appear in the url of the base documentation. For example, the Test base for this repo has the url https://airtable.com/appphImnhJO8AXmmo/api/docs.","category":"page"},{"location":"#Tablename","page":"Home","title":"Tablename","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Within each base, you may have multiple tables. The tablename argument in the following functions is just a string with the table name, eg \"Table 1\".","category":"page"}]
}
