var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Airtable","category":"page"},{"location":"#Airtable","page":"Home","title":"Airtable","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Airtable]","category":"page"},{"location":"#Airtable.Credential","page":"Home","title":"Airtable.Credential","text":" Credential(; api_key)\n\n A credentials and identity object for Trello.\n\nIf the apikey or apitoken are not provided, they will be read from the AIRTABLE_KEY environment variable. Go to Airtable account settings  to aquire your credentials.\n\n\n\n\n\n","category":"type"},{"location":"#Airtable.get-Tuple{Airtable.Credential,AbstractString}","page":"Home","title":"Airtable.get","text":"Airtable.get(cred::Credential, path::AbstractString; query_kwargs...)\n\nShorthand for Airtable.request(\"GET\", cred, path; query_kwargs)\n\n\n\n\n\n","category":"method"},{"location":"#Airtable.patch-Tuple{Airtable.Credential,AbstractString}","page":"Home","title":"Airtable.patch","text":"Airtable.patch(cred::Credential, path::AbstractString; query_kwargs...)\n\nShorthand for Airtable.request(\"PATCH\", cred, path; query_kwargs)\n\n\n\n\n\n","category":"method"},{"location":"#Airtable.post-Tuple{Airtable.Credential,AbstractString}","page":"Home","title":"Airtable.post","text":"Airtable.post(cred::Credential, path::AbstractString; query_kwargs...)\n\nShorthand for Airtable.request(\"POST\", cred, path; query_kwargs)\n\n\n\n\n\n","category":"method"},{"location":"#Airtable.put-Tuple{Airtable.Credential,AbstractString}","page":"Home","title":"Airtable.put","text":"Airtable.put(cred::Credential, path::AbstractString; query_kwargs...)\n\nShorthand for Airtable.request(\"PUT\", cred, path; query_kwargs)\n\n\n\n\n\n","category":"method"},{"location":"#Airtable.query-Tuple{Airtable.Credential,AbstractString}","page":"Home","title":"Airtable.query","text":"Airtable.query(cred::Credential, path::AbstractString; query_kwargs...)\n\nShorthand for a \"GET\" request that handles continuation and rate-limiting.\n\nThe Airtable API will return a maximum of 100 records per requests, and only allows 5 requests / sec.  This function uses the offset field returned as part of a requst that does not contain all possible records to make additional requests after pausing 0.21 seconds in between.\n\nRequired arguments:\n\ncred: an Airtable.Credential containing your API key\npath: the endpoint of your Airtable base. See https://airtable.com/api for details\n\nQuery parameters are in the form of keyword arguments, eg filterByFormla = \"NOT({Name} = '')\", maxRecords=2. See Airtable API reference for more information.\n\n\n\n\n\n","category":"method"},{"location":"#Airtable.request-Tuple{AbstractString,Airtable.Credential,AbstractString}","page":"Home","title":"Airtable.request","text":"Airtable.request(method::AbstractString, cred::Credential, path::AbstractString; query_kwargs...)\n\nMake a request to the Airtable API.\n\nRequired arguments:\n\nmethod: one of \"GET\", \"PUT\", \"POST\", or \"PATCH\",\ncred: an Airtable.Credential containing your API key\npath: the endpoint of your Airtable base. See https://airtable.com/api for details\n\nQuery parameters are in the form of keyword arguments, eg filterByFormla = \"NOT({Name} = '')\", maxRecords=2. See Airtable API reference for more information.\n\n\n\n\n\n","category":"method"}]
}
